@model ScrappingManagement.Web.Models.Quote
@{
    ViewData["Title"] = "Create Quote";
    var suppliers = ViewBag.Suppliers as List<ScrappingManagement.Web.Models.Supplier>;
    var products = ViewBag.Products as List<ScrappingManagement.Web.Models.Product>;
    var NextBillNumber = Convert.ToString(ViewBag.NextBillNumber);
}

<h2>Create Quote</h2>

<form asp-action="Create" method="post">
    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="SupplierId" class="form-label">Supplier</label>
            <select asp-for="SupplierId" class="form-select" required>
                <option value="">-- Select Supplier --</option>
                @foreach (var supplier in suppliers)
                {
                    <option value="@supplier.Id">@supplier.Name</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <label asp-for="Location" class="form-label">Location</label>
            <input asp-for="Location" class="form-control" required />
        </div>
        <div class="col-md-4">
            <label asp-for="Date" class="form-label">Date</label>
            <input asp-for="Date" class="form-control" type="date" />
        </div>
    </div>
    <div class="row mb-3">
        <div class="col-md-4">
            <label asp-for="BillNumber" class="form-label">Bill Number</label>
            <input asp-for="BillNumber" value="@NextBillNumber" class="form-control" readonly />
        </div>
    </div>
    <h4>Products</h4>
    <div class="table-responsive">
        <table class="table" id="productsTable">
        <thead>
            <tr>
                <th>NO</th>
                <th><span style="min-width: 80px;">Product</span></th>
                <th>Loaded Weight</th>
                <th>Unload Weight</th>
                <th>Nos</th>
                <th>Gross</th>
                <th>Bora Count</th>
                <th>Bora Report</th>
                <th>Product Report</th>
                <th>Net Weight</th>
                <th>Rate</th>
                <th>Total Amount</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            <!-- Dynamic rows will be added here -->
        </tbody>
        <tfoot>
            <tr>
                <td colspan="10" class="text-end fw-bold">Total</td>
                <td colspan="2">
                    <input type="number" class="form-control" name="Total" id="Total" readonly />
                </td>
                <td></td>
            </tr>
        </tfoot>
        </table>
    </div>
    <button type="button" class="btn btn-secondary" id="addProductBtn">Add Product</button>
    <div class="mt-3 mb-2 text-end">
        <label class="fw-bold me-2">Kato:</label>
        <input type="number" class="form-control d-inline-block" style="width: 200px;" id="kato" name="Kato" value="0" step="0.01" />
    </div>
    <div class="mt-3 mb-2 text-end">
        <label class="fw-bold me-2">Grand Total:</label>
        <input type="number" class="form-control d-inline-block" style="width: 200px;" id="grandTotal" name="FinalTotal" readonly />
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save Quote</button>
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </div>
</form>

@section Scripts {
    <script>
        var products = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(products));
        var suppliers = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(suppliers));

             function recalcRow(row) {
            var loadedWeight = parseFloat(row.find('.loadedWeight').val()) || 0;
            var unloadWeight = parseFloat(row.find('.unloadWeight').val()) || 0;
            var nos = parseInt(row.find('.nos').val()) || 0;

            var gross = loadedWeight - unloadWeight;
            if (nos <= 0) {
                row.find('.gross').val(gross.toFixed(2));
            } else {
                gross = parseFloat(row.find('.gross').val()) || 0;
            }

            var boraReport = parseFloat(row.find('.boraReport').val()) || 0;
            var productReport = parseFloat(row.find('.productReport').val()) || 0;

            var netWeight = gross - boraReport - productReport;
            if (nos > 0 && !isNaN(gross)) {
                netWeight = nos * gross;
            }

            row.find('.netWeight').val(netWeight.toFixed(2));

            var rate = parseFloat(row.find('.rate').val()) || 0;
            var totalAmount = netWeight * rate;

            if (!isNaN(totalAmount)) {
                row.find('.totalAmount').val(totalAmount.toFixed(2));
            } else {
                row.find('.totalAmount').val('0.00');
            }

            recalcGridTotal();
        }

        function recalcGridTotal() {
            var sum = 0;
            $('#productsTable tbody tr').each(function () {
                var val = parseFloat($(this).find('.totalAmount').val()) || 0;
                sum += val;
            });

            var floored = Math.floor(sum / 10) * 10;
            $('#Total').val(floored.toFixed(2));

            var kato = parseFloat($('#kato').val()) || 0;
            var grandTotal = floored - kato;
            $('#grandTotal').val(grandTotal.toFixed(0));
        }

        function isRowFilled(row) {
            var productId = row.find('.productId').val();
            var loadedWeight = row.find('.loadedWeight').val();
            var unloadWeight = row.find('.unloadWeight').val();
            var nos = row.find('.nos').val();
            var rate = row.find('.rate').val();

            return (productId && nos && rate) || (productId && loadedWeight && unloadWeight && rate);
        }

        function addProductRow() {
            var lastRow = $('#productsTable tbody tr').last();
            if (lastRow.length && !isRowFilled(lastRow)) {
                alert('Please fill all required fields in the last product row before adding a new one.');
                return;
            }

            var rowIdx = $('#productsTable tbody tr').length;
            var row = $('<tr>');

            row.append($('<td class="row-no">').text(rowIdx + 1));

            var productSelect = $('<select class="form-select productId" name="quoteProducts[' + rowIdx + '].ProductId" required>');
            productSelect.append('<option value="">-- Select --</option>');
            products.forEach(function (p) {
                productSelect.append('<option value="' + p.Id + '">' + p.Name + '</option>');
            });
            row.append($('<td>').append(productSelect));

            var loadedWeightValue = "";
            if (lastRow.length) {
                var prevUnload = lastRow.find('.unloadWeight').val();
                if (prevUnload) {
                    loadedWeightValue = prevUnload;
                }
            }
            row.append($('<td>').append('<input type="number" step="1" class="form-control loadedWeight" name="quoteProducts[' + rowIdx + '].LoadedWeight" value="' + loadedWeightValue + '" />'));
            row.append($('<td>').append('<input type="number" step="1" class="form-control unloadWeight" name="quoteProducts[' + rowIdx + '].UnloadWeight" />'));
            row.append($('<td>').append('<input type="number" step="1" class="form-control nos" name="quoteProducts[' + rowIdx + '].Nos" />'));
            row.append($('<td>').append('<input type="number" step="1" class="form-control gross" name="quoteProducts[' + rowIdx + '].Gross"  />'));
            row.append($('<td>').append('<input type="number" step="1" class="form-control boraCount" name="quoteProducts[' + rowIdx + '].BoraCount" value="0"  />'));
            row.append($('<td>').append('<input type="number" step="0.1" class="form-control boraReport" name="quoteProducts[' + rowIdx + '].BoraReport" value="0"  />'));
            row.append($('<td>').append('<input type="number" step="0.1" class="form-control productReport" name="quoteProducts[' + rowIdx + '].ProductReport" value="0"  />'));
            row.append($('<td>').append('<input type="number" step="0.1" class="form-control netWeight" readonly name="quoteProducts[' + rowIdx + '].NetWeight" value="0"/>'));
            row.append($('<td>').append('<input type="number" step="0.1" class="form-control rate" name="quoteProducts[' + rowIdx + '].Rate" required />'));
            row.append($('<td>').append('<input type="number" step="0.1" class="form-control totalAmount" name="quoteProducts[' + rowIdx + '].TotalAmount" readonly />'));
            row.append($('<td>').append('<button type="button" class="btn btn-danger btn-sm removeRow">Delete</button>'));

            $('#productsTable tbody').append(row);

            updateRowNumbers();

            if (loadedWeightValue) {
                row.find('.loadedWeight').trigger('input');
            }
        }

        function updateRowNumbers() {
            $('#productsTable tbody tr').each(function (idx, tr) {
                $(tr).find('.row-no').text(idx + 1);

                $(tr).find('input, select').each(function () {
                    var name = $(this).attr('name');
                    if (name) {
                        var updatedName = name.replace(/\[\d+\]/, '[' + idx + ']');
                        $(this).attr('name', updatedName);
                    }
                });
            });
        }

        $(document).on('input', '.loadedWeight, .unloadWeight, .boraCount, .boraReport, .productReport, .rate, .gross, .nos', function () {
            var row = $(this).closest('tr');
            recalcRow(row);
        });

        $(document).on('input', '.nos', function () {
            var row = $(this).closest('tr');
            if ($(this).val()) {
                row.find('.loadedWeight, .unloadWeight, .gross, .netWeight').val('');
            }
            recalcRow(row);
        });

        $(document).on('input', '.loadedWeight, .unloadWeight', function () {
            var row = $(this).closest('tr');
            if ($(this).val()) {
                row.find('.nos').val('');
            }
            recalcRow(row);
        });

        $(document).on('change', '.productId', function () {
            var row = $(this).closest('tr');
            var selectedId = $(this).val();
            var product = products.find(p => p.Id == selectedId);
            if (product) {
                row.find('.rate').val(product.Rate);
            } else {
                row.find('.rate').val('');
            }
            recalcRow(row);
        });

        $(document).on('click', '.removeRow', function () {
            $(this).closest('tr').remove();
            updateRowNumbers();
            recalcGridTotal();
        });

        $('#kato').on('input', function () {
            recalcGridTotal();
        });

        $('#SupplierId').on('change', function () {
            var selectedId = $(this).val();
            var supplier = suppliers.find(s => s.Id == selectedId);
            if (supplier) {
                $('#Location').val(supplier.Location || '');
            } else {
                $('#Location').val('');
            }
        });

        $('#addProductBtn').on('click', addProductRow);

        $(document).ready(function () {
            var today = new Date();
            var yyyy = today.getFullYear();
            var mm = String(today.getMonth() + 1).padStart(2, '0');
            var dd = String(today.getDate()).padStart(2, '0');
            var formatted = yyyy + '-' + mm + '-' + dd;
            $('#Date').val(formatted);

            addProductRow();  
        });

    </script>
}